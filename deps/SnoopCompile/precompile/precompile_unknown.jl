function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{Type{Base.TwicePrecision{Float64}}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{Array{Int8, 2}}, LinearAlgebra.UniformScaling{Bool}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{Array{Int32, 2}}, LinearAlgebra.UniformScaling{Bool}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{Array{Int64, 2}}, LinearAlgebra.UniformScaling{Bool}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{NamedTuple{(:dims,), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}}})
    precompile(Tuple{Type{NamedTuple{(:dims,), T} where T<:Tuple}, Tuple{Tuple{Int64}}})
    precompile(Tuple{Type{Array{Any, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
    precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{Type{NamedTuple{(:I,), T} where T<:Tuple}, Tuple{Bool}})
    precompile(Tuple{Type{NamedTuple{(:like,), T} where T<:Tuple}, Tuple{Array{Int32, 2}}})
    precompile(Tuple{Type{Array{Float64, 2}}, UndefInitializer, Tuple{Int64, Int64}})
    precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Int64, 1}})
    precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.PipeEndpoint}})
    precompile(Tuple{Type{Base.OneTo{T} where T<:Integer}, Int64})
    precompile(Tuple{Type{Array{Float64, 3}}, UndefInitializer, Tuple{Int64, Int64, Int64}})
    precompile(Tuple{Type{NamedTuple{(:dim,), T} where T<:Tuple}, Tuple{Int64}})
    precompile(Tuple{Type{Base.Val{3}}})
    precompile(Tuple{Type{NamedTuple{(:like,), T} where T<:Tuple}, Tuple{Array{Float64, 2}}})
    precompile(Tuple{Type{NamedTuple{(:like,), T} where T<:Tuple}, Tuple{Array{Int8, 2}}})
    precompile(Tuple{Type{NamedTuple{(:like,), T} where T<:Tuple}, Tuple{Array{Int64, 2}}})
    precompile(Tuple{Type{Array{Int32, 2}}, LinearAlgebra.UniformScaling{Bool}, Int64, Int64})
end
